DATE : 9th Nov 2023

switch : used in multiple choice applications,
where we have multiple choice and we have to pick any one choice
at a time

syntax:

switch(choice)
{
	case value1:
		code
		break;
	case value2:
		code
		break;
	.
	.
	.
	default:
		code
		break;
}

Note:
1. the choice given input to switch cannot be a floating
value

2.default case is only optional

3.writing break after every is also optional.


//Calc code using switch
package pack_switch;

import pack_prathamesh_hello.Hello;

import java.util.Scanner;


/**
 * this class represent switch case
 */
public class Calc
{
    /**
     * Purpose : this main method demo switch case
     * created by : Rupesh Yadav
     * Date : 2023-07-11
     * @param args
     */
    public static void main(String[] args) {

       int choice,n1,n2,n3;
        Scanner scan = new Scanner(System.in);
        System.out.println("1.Add\n2.Sub\nEnter choice");
        choice = scan.nextInt();

        switch (choice)
        {
            case 1:
                System.out.println("----Addition------");
                System.out.println("Enter 2 numbers ");
                n1 = scan.nextInt();
                n2 = scan.nextInt();
                n3 = n1 + n2 ;
                System.out.println("add is " + n3 );
                break;

            case 2:
                System.out.println("----Subtraction------");
                System.out.println("Enter 2 numbers ");
                n1 = scan.nextInt();
                n2 = scan.nextInt();
                n3 = n1 - n2 ;
                System.out.println("Sub is " + n3 );
                break;
            default:
                System.out.println("invalid choice ");
                break;


        }

    }
}


switch with character as choice

package pack_switch;

import pack_prathamesh_hello.Hello;

import java.util.Scanner;


/**
 * this class represent switch case
 */
public class Calc
{
    /**
     * Purpose : this main method demo switch case
     * created by : Rupesh Yadav
     * Date : 2023-07-11
     * @param args
     */
    public static void main(String[] args) {

       char choice ;
       int n1,n2,n3;
        Scanner scan = new Scanner(System.in);
        System.out.println("A.Add\nS.Sub\nEnter choice");
        choice = scan.next().charAt(0); //"A"

        switch (choice)
        {
            case 'A':
            case 'a':
            case '1':
                System.out.println("----Addition------");
                System.out.println("Enter 2 numbers ");
                n1 = scan.nextInt();
                n2 = scan.nextInt();
                n3 = n1 + n2 ;
                System.out.println("add is " + n3 );
                break;

            case 'S':
            case 's':
            case '2':
                System.out.println("----Subtraction------");
                System.out.println("Enter 2 numbers ");
                n1 = scan.nextInt();
                n2 = scan.nextInt();
                n3 = n1 - n2 ;
                System.out.println("Sub is " + n3 );
                break;
            default:
                System.out.println("invalid choice ");
                break;


        }



    }
}


TODO : atm code

CASE 1:
=========
Enter your balance
10000

1.Withdraw
2.Deposit
Enter choice
2

Enter amt to deposit
5000
Deposit Success
Curr bal is 15000


CASE 2:
=========
Enter your balance
10000

1.Withdraw
2.Deposit
Enter choice
3

Invalid choice

CASE 3:
=========
Enter your balance
10000

1.Withdraw
2.Deposit
Enter choice
2

Enter amt to deposit
31000
Deposit Limit Exceed

CASE 4:
=========
Enter your balance
10000

1.Withdraw
2.Deposit
Enter choice
1

Enter amt to withdraw
5000
withdraw Success
Curr bal is 5000


CASE 5:
=========
Enter your balance
10000

1.Withdraw
2.Deposit
Enter choice
1

Enter amt to withdraw
11000
you have insufficient balance



CASE 6:
=========
Enter your balance
10000

1.Withdraw
2.Deposit
Enter choice
1

Enter amt to withdraw
5666
amt shd be multiple of 100



CASE 7:
=========
Enter your balance
10000

1.Withdraw
2.Deposit
Enter choice
1

Enter amt to withdraw
-4500
invalid amt entered



DATE : 20th NOV  ternary operator, for loop , jump statement
Ternary Operator or Conditional operator
=========================================
? :

syntax:

(condition)? stm1 : stm2 ;

if condition given is true than stm1 will get executed otherwise
stm2 will get execute

eg 1:
========
int x,y;
x = 10;

y = (x > 5) ? 100 : 200;

sop(y);    //100


eg : pos / neg

package pack_ternary;

import java.util.Scanner;

public class Ternary
{
    public static void main(String[] args)
    {
        int num;
        Scanner scan = new Scanner(System.in);
        System.out.println("Enter any number ");
        num = scan.nextInt();

        String s = (num > 0) ? "positive" : "negative";

        System.out.println(s);


    }
}


TODO : rewrite above code for pos,neg and zero



LOOPS:
=========
1) for
2) while
3) do while
4) for each  (Arrays / Collections )

steps:
==========
1) start  (initialization)
2) end    (condition)
3) steps  (iteration)

for loop:
============
syntax:
============
for(initialization; condition ; iteration)
{
	stms
}

eg :
package pack_forLoop;

public class ForLoop
{
    public static void main(String[] args) {

        for (int i = 1; i <=10 ; i++)
        {
            System.out.print(i + "   ");
        }
    }
}

OP:
1  2  3  4  5  6  7  8  9  10



TODO 1:
==========
enter any number
4


4 8 12 16 20 24 28 32 36 40
	or

1 x 4 = 4
2 x 4 = 8


TODO 2:
find factorial of a number

Enter any number 5
fact is 120


TODO 3:
============
print fibbonacci number series

Enter range
6

0 1  1  2  3  5


0  1  1  2  3  5 .....



jump statements :
java provides a number of statements that allow you to jump immediately to another line in a program those are ;
1. break
2. continue
3. return



1) break
It is used to exit from a case in a switch statements and also used to exit from for, while, dowhile loops which will switch the control to the statement immediately after the end of the loop.

package pack_forLoop;

public class ForLoop
{
    public static void main(String[] args) {

        for (int i = 1; i <=10 ; i++)
        {
            if( i == 5)
            {
                break;
            }

            System.out.print(i + "   ");
        }
    }
}

OP:
1 2 3 4

2) continue

package pack_forLoop;

public class ForLoop
{
    public static void main(String[] args) {

        for (int i = 1; i <=10 ; i++)
        {
            if( i == 5)
            {
                continue;
            }

            System.out.print(i + "   ");
        }
    }
}

1 2 3 4 6 7 8 9 10



3) return
It is also a jump statement that is use to jump out of a function or method in execution.At that time it provides an option of carrying a value outside of the function.

package pack_forLoop;

public class ForLoop
{
    public static void main(String[] args) {

        for (int i = 1; i <=10 ; i++)
        {
            if( i == 5)
            {
                return;
            }

            System.out.print(i + "   ");
        }
        System.out.println("out of loop");
    }
}


OP
1 2 3 4










TODO 4:
===========
find if the entered number is prime or not

Enter any number
11

prime number


TODO 5:
========
*
**
***
****
*****


DATE : 21stNovember
Nested For Loop

Nested For Loop
================
writing a for loop inside another for

package pack_NestedFor;

public class NestedFor
{
    public static void main(String[] args) {

        for (int i = 1; i <=5 ; i++)   //i = 1   2
        {
            for (int j = 1; j <=5 ; j++) //j = 1 2 3 4 5
            {
                System.out.print("* ");
            }

            System.out.println();
        }
    }
}


OP:
* * * * *
* * * * *
* * * * *
* * * * *
* * * * *


TODO:

*
* *
* * *
* * * *
* * * * *


* * * * *
* * * *
* * *
* *
*


1
1 2
1 2 3
1 2 3 4
1 2 3 4 5



* * * * *
*       *
*       *
*       *
* * * * *


*                 *
* *             * *
* * *         * * *
* * * *     * * * *
* * * * * * * * * *


* * * * *
       *
     *
   *
* * * * *






























