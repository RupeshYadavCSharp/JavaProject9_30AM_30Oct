DATE : 9th Nov 2023

switch : used in multiple choice applications,
where we have multiple choice and we have to pick any one choice
at a time

syntax:

switch(choice)
{
	case value1:
		code
		break;
	case value2:
		code
		break;
	.
	.
	.
	default:
		code
		break;
}

Note:
1. the choice given input to switch cannot be a floating
value

2.default case is only optional

3.writing break after every is also optional.


//Calc code using switch
package pack_switch;

import pack_prathamesh_hello.Hello;

import java.util.Scanner;


/**
 * this class represent switch case
 */
public class Calc
{
    /**
     * Purpose : this main method demo switch case
     * created by : Rupesh Yadav
     * Date : 2023-07-11
     * @param args
     */
    public static void main(String[] args) {

       int choice,n1,n2,n3;
        Scanner scan = new Scanner(System.in);
        System.out.println("1.Add\n2.Sub\nEnter choice");
        choice = scan.nextInt();

        switch (choice)
        {
            case 1:
                System.out.println("----Addition------");
                System.out.println("Enter 2 numbers ");
                n1 = scan.nextInt();
                n2 = scan.nextInt();
                n3 = n1 + n2 ;
                System.out.println("add is " + n3 );
                break;

            case 2:
                System.out.println("----Subtraction------");
                System.out.println("Enter 2 numbers ");
                n1 = scan.nextInt();
                n2 = scan.nextInt();
                n3 = n1 - n2 ;
                System.out.println("Sub is " + n3 );
                break;
            default:
                System.out.println("invalid choice ");
                break;


        }

    }
}


switch with character as choice

package pack_switch;

import pack_prathamesh_hello.Hello;

import java.util.Scanner;


/**
 * this class represent switch case
 */
public class Calc
{
    /**
     * Purpose : this main method demo switch case
     * created by : Rupesh Yadav
     * Date : 2023-07-11
     * @param args
     */
    public static void main(String[] args) {

       char choice ;
       int n1,n2,n3;
        Scanner scan = new Scanner(System.in);
        System.out.println("A.Add\nS.Sub\nEnter choice");
        choice = scan.next().charAt(0); //"A"

        switch (choice)
        {
            case 'A':
            case 'a':
            case '1':
                System.out.println("----Addition------");
                System.out.println("Enter 2 numbers ");
                n1 = scan.nextInt();
                n2 = scan.nextInt();
                n3 = n1 + n2 ;
                System.out.println("add is " + n3 );
                break;

            case 'S':
            case 's':
            case '2':
                System.out.println("----Subtraction------");
                System.out.println("Enter 2 numbers ");
                n1 = scan.nextInt();
                n2 = scan.nextInt();
                n3 = n1 - n2 ;
                System.out.println("Sub is " + n3 );
                break;
            default:
                System.out.println("invalid choice ");
                break;


        }



    }
}


TODO : atm code

CASE 1:
=========
Enter your balance
10000

1.Withdraw
2.Deposit
Enter choice
2

Enter amt to deposit
5000
Deposit Success
Curr bal is 15000


CASE 2:
=========
Enter your balance
10000

1.Withdraw
2.Deposit
Enter choice
3

Invalid choice

CASE 3:
=========
Enter your balance
10000

1.Withdraw
2.Deposit
Enter choice
2

Enter amt to deposit
31000
Deposit Limit Exceed

CASE 4:
=========
Enter your balance
10000

1.Withdraw
2.Deposit
Enter choice
1

Enter amt to withdraw
5000
withdraw Success
Curr bal is 5000


CASE 5:
=========
Enter your balance
10000

1.Withdraw
2.Deposit
Enter choice
1

Enter amt to withdraw
11000
you have insufficient balance



CASE 6:
=========
Enter your balance
10000

1.Withdraw
2.Deposit
Enter choice
1

Enter amt to withdraw
5666
amt shd be multiple of 100



CASE 7:
=========
Enter your balance
10000

1.Withdraw
2.Deposit
Enter choice
1

Enter amt to withdraw
-4500
invalid amt entered



DATE : 20th NOV  ternary operator, for loop , jump statement
Ternary Operator or Conditional operator
=========================================
? :

syntax:

(condition)? stm1 : stm2 ;

if condition given is true than stm1 will get executed otherwise
stm2 will get execute

eg 1:
========
int x,y;
x = 10;

y = (x > 5) ? 100 : 200;

sop(y);    //100


eg : pos / neg

package pack_ternary;

import java.util.Scanner;

public class Ternary
{
    public static void main(String[] args)
    {
        int num;
        Scanner scan = new Scanner(System.in);
        System.out.println("Enter any number ");
        num = scan.nextInt();

        String s = (num > 0) ? "positive" : "negative";

        System.out.println(s);


    }
}


TODO : rewrite above code for pos,neg and zero



LOOPS:
=========
1) for
2) while
3) do while
4) for each  (Arrays / Collections )

steps:
==========
1) start  (initialization)
2) end    (condition)
3) steps  (iteration)

for loop:
============
syntax:
============
for(initialization; condition ; iteration)
{
	stms
}

eg :
package pack_forLoop;

public class ForLoop
{
    public static void main(String[] args) {

        for (int i = 1; i <=10 ; i++)
        {
            System.out.print(i + "   ");
        }
    }
}

OP:
1  2  3  4  5  6  7  8  9  10



TODO 1:
==========
enter any number
4


4 8 12 16 20 24 28 32 36 40
	or

1 x 4 = 4
2 x 4 = 8


TODO 2:
find factorial of a number

Enter any number 5
fact is 120


TODO 3:
============
print fibbonacci number series

Enter range
6

0 1  1  2  3  5


0  1  1  2  3  5 .....



jump statements :
java provides a number of statements that allow you to jump immediately to another line in a program those are ;
1. break
2. continue
3. return



1) break
It is used to exit from a case in a switch statements and also used to exit from for, while, dowhile loops which will switch the control to the statement immediately after the end of the loop.

package pack_forLoop;

public class ForLoop
{
    public static void main(String[] args) {

        for (int i = 1; i <=10 ; i++)
        {
            if( i == 5)
            {
                break;
            }

            System.out.print(i + "   ");
        }
    }
}

OP:
1 2 3 4

2) continue

package pack_forLoop;

public class ForLoop
{
    public static void main(String[] args) {

        for (int i = 1; i <=10 ; i++)
        {
            if( i == 5)
            {
                continue;
            }

            System.out.print(i + "   ");
        }
    }
}

1 2 3 4 6 7 8 9 10



3) return
It is also a jump statement that is use to jump out of a function or method in execution.At that time it provides an option of carrying a value outside of the function.

package pack_forLoop;

public class ForLoop
{
    public static void main(String[] args) {

        for (int i = 1; i <=10 ; i++)
        {
            if( i == 5)
            {
                return;
            }

            System.out.print(i + "   ");
        }
        System.out.println("out of loop");
    }
}


OP
1 2 3 4










TODO 4:
===========
find if the entered number is prime or not

Enter any number
11

prime number


TODO 5:
========
*
**
***
****
*****


DATE : 21stNovember
Nested For Loop

Nested For Loop
================
writing a for loop inside another for

package pack_NestedFor;

public class NestedFor
{
    public static void main(String[] args) {

        for (int i = 1; i <=5 ; i++)   //i = 1   2
        {
            for (int j = 1; j <=5 ; j++) //j = 1 2 3 4 5
            {
                System.out.print("* ");
            }

            System.out.println();
        }
    }
}


OP:
* * * * *
* * * * *
* * * * *
* * * * *
* * * * *


TODO:

*
* *
* * *
* * * *
* * * * *


* * * * *
* * * *
* * *
* *
*


1
1 2
1 2 3
1 2 3 4
1 2 3 4 5



* * * * *
*       *
*       *
*       *
* * * * *


*                 *
* *             * *
* * *         * * *
* * * *     * * * *
* * * * * * * * * *


* * * * *
       *
     *
   *
* * * * *


========================================
DATE : 21 NOV for loop nested patterns and while loop

TODO 1:
*                 *
* *             * *
* * *         * * *
* * * *     * * * *
* * * * * * * * * *
* * * * * * * * * *
* * * *     * * * *
* * *         * * *
* *             * *
*                 *


While loop:
=============
syntax:

intialization
while(condition)
{
    stms
    iteration
}

eg:
package pack_while;

public class WhileLoopDemo
{
    public static void main(String[] args) {

        int i = 1;
        while(i <=10)
        {
            System.out.print(i + " ");
            i++;
        }

        System.out.println("out of loop");

    }
}


Note: use for when we know in advance number of times we want to
iterate,otherwise use while loop


123 % 10 = 3
123 / 10 = 12


123 % 100 = 23
123 / 100 = 1


TODO: 2
read a number and find if that number is a spy number or not
Def: a number whose sum and product of all the digit is same


Enter any number
132

it is a spy number



do while loop:
=================
syntax:

intialization

do
{
    stm
    iteration

}while(condition);

do while is exit controlled loop,whether a conditon is true or
false do while will execute atleast once

package pack_dowhile;

public class DoWhile
{
    public static void main(String[] args) {

        int i = 1;
        do
        {
            System.out.println(i);
            i++;

        }while(i >=10);

        System.out.println("out of loop ");


    }
}


TODO 3:

Enter any number
10

Enter any number
23

Enter any number
-4

Enter any number
0

Enter any number
-1

out of loop




Nov 23rd : Methods Intro

TODO 1:
find if entered number of pronic or not

A pronic number is a number that is the product of two consecutive integers.
The number is of the form (n*(n+1)). For example, 56 is a pronic number because it is the product of 7 and 8.



TODO 2:
find if the entered number is krishnamurthy number or not
Def : a number whos sum of factorial of every digit is equal to original number

Enter any number
145


5! = 120
4! = 24
1! = 1

  Methods :
-----------
Block of code that performs specific task.

		or

named block of code


Predefined Methods
--------------------
already defined


eg:
println()
nextInt()
next()


User Defined Methods
------------------------
methods which are created manually by a programmer for its own purpose.


syntax:
---------
[<accessmodifier>] [static] [abstract/final/default] returntype/void  methodname([<args>])
{
	//code
}

eg:

public void add()
public static void sub()
abstract void eat();
protected final int show();
private static String getName(int rno);


Note: package is a default access specifier in java


example 1:
--------------
package pack_methods;

import java.util.Scanner;

public class Calculator
{

    public void add()
    {
        int n1,n2,n3;
        System.out.println("Enter 2 numbers");
        Scanner scanner = new Scanner(System.in);
        n1 = scanner.nextInt();
        n2 = scanner.nextInt();

        n3 = n1 + n2;
        System.out.println("add is " + n3);
    }

    public static  void sub()
    {
        int n1,n2,n3;
        System.out.println("Enter 2 numbers");
        Scanner scanner = new Scanner(System.in);
        n1 = scanner.nextInt();
        n2 = scanner.nextInt();

        n3 = n1 - n2;
        System.out.println("sub is " + n3);
    }


    public static void main(String[] args) {


        System.out.println("1.add\n2.sub");
        Scanner scanner = new Scanner(System.in);
        int choice = scanner.nextInt();

        if(choice == 1)
        {
            Calculator calc = new Calculator();
            calc.add();  //calling a method
        }
        else {
            Calculator.sub();
        }


    }
}


EXAMPLE 2:


package pack_methods;

import java.time.LocalDateTime;

public class Calculator
{

    public void show()
    {
        System.out.println("Welcome ");
    }

    public static void showDate()
    {
        System.out.println(LocalDateTime.now());

    }
    public static void main(String[] args) {
        //classname objname = new classname()

        Calculator objcalc = new Calculator();
        objcalc.show();       //since show() is non static(instance member) it can be invoked only by using object

        Calculator.showDate();   //since showDate() is static(classmember) it can be invoked using class name


    }



}



TODO 1;

class MyMath
{
	public void fact()
	{

	}

	public static void reverse()
	{
		 //read a number and reverse
	}

	public static void main()
	{
		1.fact
		2.reverse


	}

}




TODO 2:

class DOB
{
	public static void showDOB()
	{


	}


	public void static main()
	{

	}
}



Enter year of birth
1990
Enter month of birth
10
Enter day of birth
10


you are 32 years,5 month, 5 day

Date : 5th DEC Array
Array:
===========
variable that can store multiple values at the same time.
				or
collection of similar types of values



syntax:
===========
datatype []arrname = new datatype[size];


int arr[] = new int[5];
	or

int []arr;
arr = new int[5];

	or

int []arr = {10,20,30,40,50};


Note:
1) in java array are reference type i,e memory allocation
is done during run time.


2) values (elements) of array can be accessed only by using indexes.
and index always starts with 0

3) the first index of array is called as lower bound and last indexe
is called as upper bound of array

		mid = (lb+ub)/2;

4) arrays are always store in contigeous(Adjacent) memory location


Types:
==========
1) single Dimension Array
	that represents data in the form of single row


2) 2darray
		represents data in th form of row and col


3) Jagged Array
	array of arrays (array whose elements are arrays)





package pack_arraydemo;

import java.util.Scanner;

public class ArrayDemo
{
    public static void main(String[] args) {

        int arr[] = new int[5];
        Scanner scan = new Scanner(System.in);

        System.out.println("Enter array ");
        for (int i = 0; i < 5; i++) {

            arr[i] = scan.nextInt();
        }


        System.out.println("array is ");
        for(int i = 0;i<5;i++)
        {
            System.out.println(arr[i]);
        }



    }
}



TODO :
read an array of size 10 and find
sum of all numbers in that array

Enter array
12
44
67
78
546
89
90
78
56
45

sum is .....


TODO 2: read an array of size 5 and find largest number
in that arra


Enter array
45
67
89
12
34

largest number is 89


TODO 3:
read any array of size 8 and find an entered number
in the array

Enter any array
23
45
67
89
90
12
34
55

Enter any num to search
89

found at index 3


7th Dec :

Linear Search Code
=========================
package pack_LinearSearch;

import java.util.Scanner;

public class ArrayClass
{
    public static void main(String[] args) {

        int size,index = -1;
        boolean flag = false;
        Scanner scan = new Scanner(System.in);

        System.out.println("Enter size of array ");
        size = scan.nextInt();

        int []arr = new int[size];
        System.out.println("Enter elements ");
        for (int i = 0; i < size; i++)
        {
            arr[i] = scan.nextInt(); //10 45  23  15  90
        }

        System.out.println("Enter any number to search ");
        int num = scan.nextInt();    //23

        for (int i = 0; i < size; i++)
        {
            if(arr[i] == num)
            {
                    flag = true;
                    index = i;
                    break;
            }
        }

        if(flag == true)
        {
            System.out.println("Found at index " + index);
        }
        else
        {
            System.out.println("not found ");
        }

    }
}


//Remove repeated Elements From Array Code
package pack_repeating;

import java.util.Scanner;

public class Repeating {
    public static void main(String[] args) {
        int size;
        Scanner scan = new Scanner(System.in);
        System.out.println("Enter size: ");
        size = scan.nextInt();
        int arr[] = new int[size];
        System.out.println("Enter Elements: ");
        for(int i=0;i<size;i++)
        {
            arr[i] = scan.nextInt();
        }

        int repeatedarr[] = new int[size];
        int n = 0;


        for (int i = 0; i < size; i++) {
            for (int j = i + 1; j < size; j++) {
                if (arr[i] == arr[j])
                {
                    boolean flag = false;
                    for(int k = 0; k<=n; k++)
                    {
                         if(repeatedarr[k] == arr[i])
                         {
                             flag = true;
                             break;
                         }
                    }

                    if(flag == false)
                    {
                        repeatedarr[n] = arr[i];
                        n++;
                    }

                    break;

                }
            }
        }

        System.out.println("repeated numbers are ");
        for (int i = 0; i <n; i++)
        {
            System.out.println(repeatedarr[i]);
        }
    }
}




























































































